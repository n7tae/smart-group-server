gateway = {
# this section defines how your Smart Group Server communicates with the outside world
# callsign has to be be a unique login on QuadNet network and also has to be a valid callsign.
# DON'T USE A CALLSIGN ALREADY IN USE for a hotspot or a repeater, find another callsign!
# using the same callsign for two different QuadNet clients (like a gateway and a Smart Group Server) is not allowed!
	callsign = "CHNGME"
}

# Leaving the ircddb section commented out will result in an IPv4-only server. If you want dual stack operation,
# you need to to specify both the rrv6 and the rr servers, and the rrv6 server needs to be listed first.
# Pay attention to the parentheses and the squiggly brackets. They must be properly balanced!
# Please note that the smart-group-server will probably not work properly on any other ircddb network!
# a maximum of two irc networks can be specified, and if routes to both networks exist, the first listed network takes presidence
# if this section is left undefined, then the two listed networks will be defined by default
#ircddb = (
#	{
#		hostname = "rrv6.openquad.net"
#		username = "CHNGME"
#		password = ""
#	}, {
#		hostname = "rr.openquad.net"
#		username = "CHNGME"	# The ircDDB username default to the value defined for gateway.callsign.
#		password = ""
#	}
#)

remote = {
#	enabled = false
#	password = "ChangeMe"
#	port = 39999			# choose a port for communication. Wherever the server is running, this port on its local network needs to be open.
#	family = "IPV4"			# change to "IPV6" if your installations (server and client) supports it
}

module = ( # The modules list is contained in parentheses

	{						# Up to 15 different modules can be specified, each in curly brackets
		band = "A"			# Each module has to have a band letter
		basename = "CHNGME" # Has to be less than 8 characters
#		subscribe = "A"		# A single upper case letter or a space
#		unsubscribe = "T"	# A single upper case letter different from subscribe
# info has to be less than 21 chars, otherwise it will be set to the default
#		info = "Smart Group Server"
#		usertimeout = 300	# if a user is inactive for this many minutes, they will be automatically unsubscribed
#		rxonly = false		# if true, subscribers can only receive voice data from a connected reflector
		reflector = "CHNGME C"
#	},						# be sure there is a comma between modules
#	{
#		band = "B"
#		basename = "CHNGME"
#		subscribe = "A"
#		unsubscribe = "T"
#		info = "My smart-group-server"
#		usertimeout = 300
#		rxonly = false
#		reflector = "CHNGME C"
	}
)						# close paren to close out the module defines
